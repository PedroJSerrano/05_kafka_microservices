version: '3.8'

services:
  # Servicio de MySQL
  mysql-server:
    image: mysql:8.0
    container_name: mysql-server
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ./db/initdb.sql:/docker-entrypoint-initdb.d/initdb.sql
      - mysql_data:/var/lib/mysql
    ports:
      - "3006:3306" # Mapea el puerto 3306 del contenedor al puerto 3006 de tu máquina host
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Servicio de Zookeeper (requerido por Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    ports:
      - "2181:2181" # Mapea el puerto de Zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "sh", "-c", "echo stat | nc localhost 2181" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Servicio de Kafka
  kafka-broker:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka-broker
    ports:
      - "9092:9092" # Mapea el puerto 9092 del contenedor al puerto 9092 de tu máquina host (para clientes externos como CLI)
      # No necesitamos mapear el 9093 al host, es solo para comunicación interna de Docker
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      # Internamente los microservicios se conectarán a kafka-broker:9093
      # Externamente (desde el host, si lo necesitas) se conectarán a localhost:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9093,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck: # <--- Añade esto
      test: ["CMD", "cub kafka-ready -b localhost:9092 1 20"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Servicios de Microservicios Spring Boot
  stock-control-microservice:
    build:
      context: ./stock_control_microservice
      dockerfile: Dockerfile
    container_name: stock-control-microservice
    ports:
      - "8000:8000"
    environment:
      SPRING_PROFILES_ACTIVE: local
    depends_on:
      mysql-server:
        condition: service_healthy
    networks:
      - app-network

  shipments-microservice:
    build:
      context: ./shipments_microservice
      dockerfile: Dockerfile
    container_name: shipments-microservice
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: local
    depends_on:
      mysql-server:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
    networks:
      - app-network

  orders-microservice:
    build:
      context: ./orders_microservice
      dockerfile: Dockerfile
    container_name: orders-microservice
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: local
    depends_on:
      kafka-broker:
        condition: service_healthy
    networks:
      - app-network

  order-processor-microservice:
    build:
      context: ./order_processor_microservice
      dockerfile: Dockerfile
    container_name: order-processor-microservice
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: local
    depends_on:
      kafka-broker:
        condition: service_healthy
      stock-control-microservice: # Dependencia explícita ya que lo llama por WebClient
        condition: service_healthy
    networks:
      - app-network

volumes:
  mysql_data:

networks:
  app-network:
    driver: bridge