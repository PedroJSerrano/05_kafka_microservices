version: '3.8'

services:
  # Servicio de MySQL
  mysql-server:
    image: mysql:8.0
    container_name: mysql-server
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ./db/initdb.sql:/docker-entrypoint-initdb.d/initdb.sql
      - mysql_data:/var/lib/mysql
    ports:
      - "3006:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Servicio de Zookeeper (requerido por Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "sh", "-c", "echo stat | nc localhost 2181" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Servicio de Kafka
  kafka-broker:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka-broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9093
      #,PLAINTEXT_HOST://localhost:9092 # <-- Descomentar si necesitas acceso desde el host vía 9092 directamente a Kafka
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "cub", "kafka-ready", "-b", "kafka-broker:9093", "1", "20"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - app-network

  # SERVICIO DE LOCALSTACK AÑADIDO
  localstack:
    container_name: localstack_main # Asigna un nombre específico al contenedor. Facilita la identificación en `docker ps`.
    image: localstack/localstack:latest # Especifica la imagen Docker a usar. `:latest` asegura que siempre uses la versión más reciente.
    ports:
      # Mapeos de puertos desde el contenedor (derecha) al host (izquierda).
      # Los servicios de LocalStack escuchan en estos puertos dentro del contenedor.
      # Usar 127.0.0.1:xxx:yyy asegura que los puertos solo sean accesibles desde tu máquina local (localhost).
      - "127.0.0.1:4510-4559:4510-4559" # Este es un rango de puertos que algunos servicios de LocalStack pueden usar si se configuran individualmente.
      - "127.0.0.1:4566:4566"           # **¡Este es el puerto más importante!** Es el "unified endpoint" de LocalStack, donde la mayoría de los servicios (S3, SQS, DynamoDB, etc.) son accesibles. Tu AWS CLI apuntará a este puerto.
      - "127.0.0.1:4583:4583"           # Puerto específico para la emulación de AWS API Gateway.
    environment:
      # Variables de entorno que se pasan al contenedor de LocalStack para su configuración.
      - AWS_ACCESS_KEY_ID=test        # Credenciales ficticias. LocalStack no las valida por defecto.
      - AWS_SECRET_ACCESS_KEY=test    # Son necesarias para que el AWS CLI no se queje, pero LocalStack las ignora.
      - AWS_DEFAULT_REGION=eu-west-2  # Región por defecto. LocalStack emula todas las regiones, pero AWS CLI necesita una.
      # Define qué servicios de AWS quieres iniciar dentro de LocalStack.
      # Esto es crucial para optimizar el uso de recursos y el tiempo de inicio.
      # ¡Añade o quita servicios según tus necesidades!
      # Ejemplos comunes: s3, sqs, sns, lambda, dynamodb, iam, sts, cloudformation, logs, secretsmanager, ec2, apigateway.
      - SERVICES=s3,iam,sts,cloudformation,logs,secretsmanager,apigateway,lambda
      # Permite que LocalStack acceda al daemon de Docker de tu host.
      # Es fundamental para servicios como AWS Lambda (para ejecutar funciones en contenedores dentro de LocalStack).
      - DOCKER_HOST=unix:///var/run/docker.sock
      # Ayuda a evitar problemas de rutas largas en Windows asegurando que los archivos temporales se gestionen dentro del contenedor.
      - HOST_TMP_FOLDER=/tmp/localstack
      - DEBUG=1                     # Opcional: Establece esto en 1 para ver logs de depuración más detallados de LocalStack. Útil para troubleshooting.
      - LOCALSTACK_HOST=localhost   # Asegura que LocalStack sepa su propia dirección (localhost) para callbacks internos o comunicaciones entre servicios.
      # - EDGE_PORT=4566            # No es necesario especificar, 4566 es el puerto por defecto para el unified endpoint.
    volumes:
      # Volúmenes para persistencia de datos.
      # Mapea un volumen con nombre (`localstack_data`) de Docker a una ruta dentro del contenedor.
      # Esto asegura que los datos de tus servicios (ej. objetos S3, tablas DynamoDB) persistan incluso si reinicias el contenedor.
      - "localstack_data:/var/lib/localstack"
      # Monta el socket de Docker de tu host dentro del contenedor.
      # Necesario para que LocalStack pueda crear contenedores hijos (ej. para ejecutar funciones Lambda).
      - "/var/run/docker.sock:/var/run/docker.sock"
      # - "./.localstack:/var/lib/localstack" # Alternativa: si prefieres que los datos de persistencia se almacenen en una carpeta visible en tu host (en la misma ubicación que el docker-compose.yml). Descomenta esta línea y comenta la anterior si lo prefieres.
    networks:
      # Conecta el contenedor de LocalStack a la misma red Docker (`app-network`)
      # que tus otros microservicios.
      # Esto permite que tus microservicios (si están configurados para ello)
      # puedan comunicarse con LocalStack usando nombres de servicio (ej. `http://localstack:4566`).
      - app-network
    # Healthcheck para verificar si LocalStack está listo.
    # Llama al endpoint de salud de LocalStack.
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:4566/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10 # Aumentar los reintentos
      start_period: 60s # Darle más tiempo para arrancar

  # Servicios de Microservicios Spring Boot
  stock-control-microservice:
    build:
      context: ./stock-control-microservice
      dockerfile: Dockerfile
    container_name: stock-control-microservice
    ports:
      - "8083:8083"
      - "5005:5005"
    environment:
      SPRING_PROFILES_ACTIVE: local
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
    depends_on:
      mysql-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  shipments-microservice:
    build:
      context: ./shipments-microservice
      dockerfile: Dockerfile
    container_name: shipments-microservice
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: local
    depends_on:
      mysql-server:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
    networks:
      - app-network

  orders-microservice:
    build:
      context: ./orders-microservice
      dockerfile: Dockerfile
    container_name: orders-microservice
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: local
    depends_on:
      kafka-broker:
        condition: service_healthy
    networks:
      - app-network

  order-processor-microservice:
    build:
      context: ./order-processor-microservice
      dockerfile: Dockerfile
    container_name: order-processor-microservice
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: local
    depends_on:
      kafka-broker:
        condition: service_healthy
      stock-control-microservice:
        condition: service_healthy
    networks:
      - app-network

  auth-microservice:
    build:
      context: ./auth-microservice
      dockerfile: Dockerfile
    container_name: auth-microservice
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: local
    depends_on:
      mysql-server:
        condition: service_healthy
    networks:
      - app-network

volumes:
  mysql_data:
  localstack_data: # Define el volumen para la persistencia de datos de LocalStack

networks:
  app-network:
    driver: bridge