# Nombre del flujo de trabajo que aparecerá en la interfaz de GitHub Actions.
name: Build, Compile, Test & SonarCloud Analysis

# Define los eventos que activarán este flujo de trabajo.
on:
  # Se activa en cada 'push' a la rama 'main'.
  push:
    branches:
      - master
      - develop
      - feature
  # Se activa en cada 'pull_request' dirigido a la rama 'main'.
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master

  # Permite ejecutar el workflow manualmente desde la interfaz de GitHub.
  workflow_dispatch:

# Define los trabajos (jobs) que se ejecutarán como parte de este flujo de trabajo.
jobs:
  # Nombre del trabajo.
  build-and-test-and-sonar:

    # Define el sistema operativo en el que se ejecutará este trabajo.
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del código fuente del repositorio.
      - name: Checkout del repositorio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necesario para que SonarScanner pueda analizar el historial de Git y el New Code.

      # Paso 2: Configuración del entorno de lenguaje Java.
      # Utiliza 'actions/setup-java' para configurar el JDK.
      - name: Configurar Java JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution : 'temurin'
          cache: 'maven' # Habilita el cache de Maven para acelerar las builds futuras

      # Paso 3: Cache de paquetes de SonarCloud.
      # Esto acelera los análisis futuros descargando los componentes del SonarScanner en el runner.
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Paso 4: Instalación de dependencias, compilación y ejecución de pruebas con Maven.
      # Se usa 'verify' para asegurar que JaCoCo genere los informes de cobertura antes de que SonarCloud los recoja.
      - name: Build, Compilar y Ejecutar Pruebas con Maven
        run: mvn -B clean verify # '-B' es para modo batch, 'clean verify' para tests y JaCoCo reports.

      # PASO CLAVE: SonarCloud Scan - ¡Ahora siendo explícitos con projectKey, organization y token!
      - name: SonarCloud Scan
        run: |
          mvn -B sonar:sonar \
            -Dsonar.projectKey=pjserrano:kafka_microservices \
            -Dsonar.organization=pedrojserrano \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}
        env:
          # Aunque Maven lo recibe por -Dsonar.token, lo dejamos aquí como respaldo
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          # Estas variables de entorno ya no son estrictamente necesarias aquí si se pasan por -D
          # pero no hacen daño y pueden servir para otras herramientas si las necesitan.
          SONAR_PROJECT_KEY: pjserrano:kafka_microservices
          SONAR_ORGANIZATION: pedrojserrano
          SONAR_HOST_URL: https://sonarcloud.io


      # PASO DE VERIFICACIÓN DEL QUALITY GATE (usando la acción específica)
      - name: Check SonarCloud Quality Gate Status
        uses: SonarSource/sonarcloud-quality-gate-action@latest
        id: check_sonar_quality_gate
        env:
          # Estas son las variables de entorno que la acción 'sonarcloud-quality-gate-action' necesita.
          # Aseguramos que el token, project key y organization estén disponibles para la acción.
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: pjserrano:kafka_microservices
          SONAR_ORGANIZATION: pedrojserrano
          # Opcional: Si la acción necesita la URL, aunque generalmente la infiere de SonarCloud.
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          projectBaseDir: .

      # Paso 7: Fallar la acción de GitHub si el Quality Gate no pasa.
      # Este paso utiliza la salida del paso anterior para decidir si el workflow debe fallar.
      - name: Fail on Quality Gate failure
        if: steps.check_sonar_quality_gate.outputs.qualityGateStatus == 'ERROR'
        run: |
          echo "SonarCloud Quality Gate failed! Please check the SonarCloud dashboard for details: https://sonarcloud.io/dashboard?id=pjserrano%3Akafka_microservices"
          exit 1

      # Paso 8: Subir los informes de las pruebas (Surefire Reports).
      - name: Subir Informes de Pruebas
        uses: actions/upload-artifact@v4
        # Esta condición garantiza que este paso solo se ejecute si el paso de 'mvn' falla.
        if: failure()
        with:
          name: surefire-reports
          path: '**/target/surefire-reports'

      # Paso 9: Subir artefactos de build.
      - name: Subir artefactos de build
        uses: actions/upload-artifact@v4
        with:
          name: java-artefactos-build
          path: target/*.jar