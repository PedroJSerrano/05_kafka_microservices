# Nombre del flujo de trabajo que aparecerá en la interfaz de GitHub Actions.
name: Build, Compile, Test & SonarCloud Analysis

on:
  push:
    branches:
      - master
      - develop
      - feature
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master

  workflow_dispatch:

jobs:
  build-and-test-and-sonar:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurar Java JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build, Compilar y Ejecutar Pruebas con Maven
        run: mvn -B clean verify

      # NUEVO PASO: Ejecutar el SonarCloud Scan sin capturar la salida directamente
      - name: Perform SonarCloud Scan
        id: sonar_scan_perform # Nuevo ID para este paso
        run: mvn -B sonar:sonar \
          -Dsonar.projectKey=pjserrano:kafka_microservices \
          -Dsonar.organization=pedrojserrano \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.token=${{ secrets.SONAR_TOKEN }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        # Añadimos un 'continue-on-error: true' TEMPORALMENTE para que podamos extraer el ID
        # incluso si el comando mvn falla por alguna razón (aunque no debería).
        # Lo quitaremos una vez que la extracción del ID sea estable.
        continue-on-error: true

      # Paso para instalar jq (asegúrate de que este paso esté antes del paso de la API)
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # NUEVO PASO: Extraer el CE Task ID del log del paso anterior
      - name: Extract SonarCloud CE Task ID
        id: extract_ce_task_id
        run: |
          # Acceder al log del paso anterior usando 'github.steps.<step_id>.outputs' no es para el log en sí,
          # sino para la salida de los comandos. Para el log completo, se accede al archivo del log.
          # GitHub Actions guarda el log de cada paso en un archivo.
          # Lamentablemente, no hay una forma directa y fácil de acceder al log *completo* de un paso anterior
          # en un paso siguiente sin trucos como guardar el log en un archivo temporal o usar 'pipefail'.

          # VAMOS A USAR UN TRUCO: Volver a ejecutar mvn sonar:sonar pero con un comando que
          # solo imprima la línea del CE Task ID y luego usar esa salida.
          # Esto es menos eficiente (doble ejecución), pero más fiable para la captura del ID.
          # Otra opción es usar la API de GitHub para descargar logs, lo cual es más complejo.

          # Volviendo a la estrategia de capturar la salida, pero asegurándonos de que
          # el comando mvn esté bien estructurado para ello. El problema anterior pudo ser
          # por el anidamiento del 'mvn -B sonar:sonar \ mvn -B sonar:sonar' que habías tenido.
          # Asegurémonos que es solo una invocación.

          # Intentaremos de nuevo capturar la salida pero con una invocación limpia
          echo "Attempting to re-run Sonar Scan in silent mode to capture CE Task ID..."
          # Ejecutamos el comando de Sonar de nuevo, pero esta vez redirigimos la salida
          # para capturar solo la línea relevante, si aparece.
          # El -Dsonar.log.level=ERROR podría ayudar a reducir el ruido
          CE_TASK_ID_LINE=$(mvn -B sonar:sonar \
            -Dsonar.projectKey=pjserrano:kafka_microservices \
            -Dsonar.organization=pedrojserrano \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            | grep "More about the report processing at https://sonarcloud.io/api/ce/task?id=")
          
          echo "Captured line with CE Task ID: $CE_TASK_ID_LINE"

          # Extraer el ID de la línea capturada
          # Usamos cut con 'id=' como delimitador y luego el espacio, para obtener solo el ID.
          CE_TASK_ID=$(echo "$CE_TASK_ID_LINE" | grep -o 'id=[^[:space:]]*' | cut -d'=' -f2)
          
          if [ -z "$CE_TASK_ID" ]; then
            echo "Error: Could not find CE Task Id in the output. The analysis might not have been submitted successfully, or the parsing failed."
            # Si quieres ver el log completo de este intento si falla la extracción:
            # mvn -B sonar:sonar -Dsonar.projectKey=pjserrano:kafka_microservices -Dsonar.organization=pedrojserrano -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${{ secrets.SONAR_TOKEN }}
            exit 1
          fi
          
          echo "Extracted CE Task ID: $CE_TASK_ID"
          echo "CE_TASK_ID=$CE_TASK_ID" >> $GITHUB_OUTPUT
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # PASO DE VERIFICACIÓN DEL QUALITY GATE (sin cambios respecto al que te di antes)
      - name: Check SonarCloud Quality Gate Status via API
        id: check_quality_gate_api
        run: |
          CE_TASK_ID="${{ steps.extract_ce_task_id.outputs.CE_TASK_ID }}" # Ahora referenciamos el nuevo paso
          
          if [ -z "$CE_TASK_ID" ]; then
            echo "Error: CE Task ID not found from previous step. Cannot check Quality Gate."
            exit 1
          fi

          echo "Checking Quality Gate for SonarCloud CE Task ID: $CE_TASK_ID"
          
          MAX_RETRIES=20
          WAIT_SECONDS=10
          
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i/$MAX_RETRIES: Querying SonarCloud API for task status..."
          
            API_RESPONSE=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
              "https://sonarcloud.io/api/ce/task?id=$CE_TASK_ID")
          
            echo "API Response for CE task: $API_RESPONSE"
          
            TASK_STATUS=$(echo "$API_RESPONSE" | jq -r '.task.status')
          
            if [ "$TASK_STATUS" == "SUCCESS" ]; then
              ANALYSIS_ID=$(echo "$API_RESPONSE" | jq -r '.task.analysisId')
              echo "Analysis ID from CE task: $ANALYSIS_ID"

              if [ "$ANALYSIS_ID" == "null" ] || [ -z "$ANALYSIS_ID" ]; then
                echo "Analysis finished, but analysisId is null/empty. Waiting for it to appear..."
                sleep $WAIT_SECONDS
                continue
              fi

              QUALITY_GATE_RESPONSE=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
                "https://sonarcloud.io/api/qualitygates/project_status?analysisId=$ANALYSIS_ID")
          
              echo "API Response for Quality Gate: $QUALITY_GATE_RESPONSE"
          
              QUALITY_GATE_STATUS=$(echo "$QUALITY_GATE_RESPONSE" | jq -r '.projectStatus.status')

              if [ "$QUALITY_GATE_STATUS" == "null" ] || [ -z "$QUALITY_GATE_STATUS" ]; then
                echo "Quality Gate status not yet available, or API response malformed. Waiting..."
                sleep $WAIT_SECONDS
                continue
              else
                echo "SonarCloud analysis completed. Quality Gate Status: $QUALITY_GATE_STATUS"
                echo "qualityGateStatus=$QUALITY_GATE_STATUS" >> $GITHUB_OUTPUT
                break
              fi

            elif [ "$TASK_STATUS" == "PENDING" ] || [ "$TASK_STATUS" == "IN_PROGRESS" ]; then
              echo "SonarCloud analysis is still $TASK_STATUS. Waiting..."
              sleep $WAIT_SECONDS
            else
              echo "SonarCloud analysis failed on SonarCloud side with status: $TASK_STATUS"
              ERROR_MESSAGE=$(echo "$API_RESPONSE" | jq -r '.errors[0].msg // "No specific error message."')
              echo "SonarCloud Error: $ERROR_MESSAGE"
              echo "qualityGateStatus=ERROR" >> $GITHUB_OUTPUT
              exit 1
            fi
          
            if [ $i -eq $MAX_RETRIES ]; then
              echo "Max retries reached. SonarCloud analysis did not complete successfully or QG status could not be retrieved."
              echo "qualityGateStatus=ERROR" >> $GITHUB_OUTPUT
              exit 1
            fi
          done
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash {0}

      # PASO DE FALLO (igual que antes)
      - name: Fail on Quality Gate failure
        if: steps.check_quality_gate_api.outputs.qualityGateStatus == 'ERROR'
        run: |
          echo "SonarCloud Quality Gate failed! Please check the SonarCloud dashboard for details: https://sonarcloud.io/dashboard?id=pjserrano%3Akafka_microservices"
          exit 1

      - name: Subir Informes de Pruebas
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: surefire-reports
          path: '**/target/surefire-reports'

      - name: Subir artefactos de build
        uses: actions/upload-artifact@v4
        with:
          name: java-artefactos-build
          path: target/*.jar